<?php

namespace DiscountBundle\Repository;

use Doctrine\ORM\Query\Expr\Join;
use DiscountBundle\Entity\Product;

/**
 * ShowProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class ShowProductRepository extends \Doctrine\ORM\EntityRepository
{   
    // requête pour supprimer les produits du camping connecté dans la table show_product
    // DELETE FROM `show_product` WHERE show_camp_live_id = 1
  public function deleteProductByCamping($showCampLiveId)
  {
      return $this->createQueryBuilder('u')
        ->delete()
        ->where('u.showCampLiveId = ?1')
        ->setParameter(1, $showCampLiveId)
        ->getQuery()
        ->getResult();
  }

   public function findProductsAlreadyExists($showCampLiveId)
    {

       // sous requete en doctrine qui correspond à
        // "SELECT concatenation from product WHERE product.concatenation IS NOT NULL AND product.product_visibility =1"
        // permet de selectionner les produits dont la visibilité est à 1.

       $subquery = $this->createQueryBuilder('show')
            ->select('m.concatenation')
            ->from("DiscountBundle:Product", "m")
            ->where("m.concatenation is NOT NULL AND m.productVisibility = 1");

       // La requete principale récupère tous les produits via une left join et fais une comparaison
        // et on lui passe grace au "notIn" la sous requete pour exclure les produits dont la visibilité est à 1.
        $query = $this->createQueryBuilder('sp');
        $query->select('sp.id', 'sp.showCampLiveId', 'p.campLiveId', 'sp.showConcatenation', 'sp.showDateWeek',
            'sp.showWording','sp.showIdProduct', 'sp.showCurrentPrice', 'p.concatenation', 'p.productVisibility')
            ->leftJoin(
            'DiscountBundle:Product', 'p',
            Join::WITH,
            'sp.showConcatenation = p.concatenation'
            )
            ->addselect('p')
            ->where('(p.concatenation is NULL AND p.productVisibility is NULL AND sp.showCampLiveId = ?1)
                OR '. ($query->expr()->notIn("p.concatenation", $subquery->getDQL())))
            ->andWhere("sp.showCampLiveId = ?2")
            ->setParameter(1, $showCampLiveId)
            ->setParameter(2, $showCampLiveId)
            ->groupBy('sp.id');


       return $query->getQuery()->getResult();

   }

}

// SELECT sp.id, sp.show_camp_live_id, p.camp_live_id, sp.show_concatenation, sp.show_date_week, sp.show_id_product, sp.show_current_price, p.concatenation, p.product_visibility
// FROM show_product sp
// LEFT JOIN product p ON show_concatenation = concatenation
// WHERE (p.concatenation IS NULL AND p.product_visibility IS NULL AND sp.show_camp_live_id = $showCampLiveId)
// OR p.concatenation NOT IN (SELECT concatenation from product WHERE product.concatenation IS NOT NULL AND product.product_visibility =1)
// AND p.camp_live_id = $showCampLiveId
